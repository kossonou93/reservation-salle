{"ast":null,"code":"import React from 'react';\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (ref && 'current' in ref) {\n    ref.current = node;\n  }\n}\n/**\n * React hook that merges up to two React refs into a single memoized function React Ref\n * @param {import('react').Ref<any>} refA\n * @param {import('react').Ref<any>} [refB]\n */\n\nexport function useMergedRef(refA, refB) {\n  return React.useMemo(function () {\n    if (!refA && !refB) {\n      return null;\n    }\n    return function (node) {\n      setRef(refA, node);\n      setRef(refB, node);\n    };\n  }, [refA, refB]);\n}","map":{"version":3,"names":["React","setRef","ref","node","current","useMergedRef","refA","refB","useMemo"],"sources":["D:/SPRING BOOT/reservation-salle/reservation-salle-front/node_modules/evergreen-ui/esm/hooks/use-merged-ref.js"],"sourcesContent":["import React from 'react';\n\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (ref && 'current' in ref) {\n    ref.current = node;\n  }\n}\n/**\n * React hook that merges up to two React refs into a single memoized function React Ref\n * @param {import('react').Ref<any>} refA\n * @param {import('react').Ref<any>} [refB]\n */\n\n\nexport function useMergedRef(refA, refB) {\n  return React.useMemo(function () {\n    if (!refA && !refB) {\n      return null;\n    }\n\n    return function (node) {\n      setRef(refA, node);\n      setRef(refB, node);\n    };\n  }, [refA, refB]);\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,MAAMA,CAACC,GAAG,EAAEC,IAAI,EAAE;EACzB,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAACC,IAAI,CAAC;EACX,CAAC,MAAM,IAAID,GAAG,IAAI,SAAS,IAAIA,GAAG,EAAE;IAClCA,GAAG,CAACE,OAAO,GAAGD,IAAI;EACpB;AACF;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASE,YAAYA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACvC,OAAOP,KAAK,CAACQ,OAAO,CAAC,YAAY;IAC/B,IAAI,CAACF,IAAI,IAAI,CAACC,IAAI,EAAE;MAClB,OAAO,IAAI;IACb;IAEA,OAAO,UAAUJ,IAAI,EAAE;MACrBF,MAAM,CAACK,IAAI,EAAEH,IAAI,CAAC;MAClBF,MAAM,CAACM,IAAI,EAAEJ,IAAI,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,CAACG,IAAI,EAAEC,IAAI,CAAC,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}