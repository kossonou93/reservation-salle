{"ast":null,"code":"import merge from 'lodash.merge';\nimport splitFiles from './split-files';\n/**\n * @typedef {object} RebaseFilesOptions\n * @property {string[] | undefined} acceptedMimeTypes\n * @property {number | undefined} maxFiles\n * @property {number | undefined} maxSizeInBytes\n */\n\n/**\n * @typedef {object} RebaseFilesResult\n * @property {File[]} accepted\n * @property {import('./get-file-rejections').FileRejection[]} rejected\n */\n\n/**\n * Returns separate arrays for accepted and rejected files based on the provided options, similar to\n * `splitFiles`. This function should be used for rebasing files on removal (i.e. for removing files\n * from the `rejected` array when they are no longer over maximum limit, if there is one)\n * @param {File[]} files\n * @param {RebaseFilesOptions | undefined} options\n * @returns {RebaseFilesResult}\n */\n\nvar rebaseFiles = function rebaseFiles(files, options) {\n  return splitFiles(files, merge({}, options !== null && options !== void 0 ? options : {}, {\n    currentFileCount: null\n  }));\n};\nexport default rebaseFiles;","map":{"version":3,"names":["merge","splitFiles","rebaseFiles","files","options","currentFileCount"],"sources":["D:/SPRING BOOT/reservation-salle/reservation-salle-front/node_modules/evergreen-ui/esm/file-uploader/src/utils/rebase-files.js"],"sourcesContent":["import merge from 'lodash.merge';\nimport splitFiles from './split-files';\n/**\n * @typedef {object} RebaseFilesOptions\n * @property {string[] | undefined} acceptedMimeTypes\n * @property {number | undefined} maxFiles\n * @property {number | undefined} maxSizeInBytes\n */\n\n/**\n * @typedef {object} RebaseFilesResult\n * @property {File[]} accepted\n * @property {import('./get-file-rejections').FileRejection[]} rejected\n */\n\n/**\n * Returns separate arrays for accepted and rejected files based on the provided options, similar to\n * `splitFiles`. This function should be used for rebasing files on removal (i.e. for removing files\n * from the `rejected` array when they are no longer over maximum limit, if there is one)\n * @param {File[]} files\n * @param {RebaseFilesOptions | undefined} options\n * @returns {RebaseFilesResult}\n */\n\nvar rebaseFiles = function rebaseFiles(files, options) {\n  return splitFiles(files, merge({}, options !== null && options !== void 0 ? options : {}, {\n    currentFileCount: null\n  }));\n};\n\nexport default rebaseFiles;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,cAAc;AAChC,OAAOC,UAAU,MAAM,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GAAG,SAASA,WAAWA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACrD,OAAOH,UAAU,CAACE,KAAK,EAAEH,KAAK,CAAC,CAAC,CAAC,EAAEI,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,CAAC,CAAC,EAAE;IACxFC,gBAAgB,EAAE;EACpB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}