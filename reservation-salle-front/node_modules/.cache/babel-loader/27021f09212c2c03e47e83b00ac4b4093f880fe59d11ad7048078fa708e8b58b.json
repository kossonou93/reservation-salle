{"ast":null,"code":"(function () {\n  var computeScore, countDir, file_coeff, getExtension, getExtensionScore, isMatch, scorePath, scoreSize, tau_depth, _ref;\n  _ref = require('./scorer'), isMatch = _ref.isMatch, computeScore = _ref.computeScore, scoreSize = _ref.scoreSize;\n  tau_depth = 20;\n  file_coeff = 2.5;\n  exports.score = function (string, query, options) {\n    var allowErrors, preparedQuery, score, string_lw;\n    preparedQuery = options.preparedQuery, allowErrors = options.allowErrors;\n    if (!(allowErrors || isMatch(string, preparedQuery.core_lw, preparedQuery.core_up))) {\n      return 0;\n    }\n    string_lw = string.toLowerCase();\n    score = computeScore(string, string_lw, preparedQuery);\n    score = scorePath(string, string_lw, score, options);\n    return Math.ceil(score);\n  };\n  scorePath = function (subject, subject_lw, fullPathScore, options) {\n    var alpha, basePathScore, basePos, depth, end, extAdjust, fileLength, pathSeparator, preparedQuery, useExtensionBonus;\n    if (fullPathScore === 0) {\n      return 0;\n    }\n    preparedQuery = options.preparedQuery, useExtensionBonus = options.useExtensionBonus, pathSeparator = options.pathSeparator;\n    end = subject.length - 1;\n    while (subject[end] === pathSeparator) {\n      end--;\n    }\n    basePos = subject.lastIndexOf(pathSeparator, end);\n    fileLength = end - basePos;\n    extAdjust = 1.0;\n    if (useExtensionBonus) {\n      extAdjust += getExtensionScore(subject_lw, preparedQuery.ext, basePos, end, 2);\n      fullPathScore *= extAdjust;\n    }\n    if (basePos === -1) {\n      return fullPathScore;\n    }\n    depth = preparedQuery.depth;\n    while (basePos > -1 && depth-- > 0) {\n      basePos = subject.lastIndexOf(pathSeparator, basePos - 1);\n    }\n    basePathScore = basePos === -1 ? fullPathScore : extAdjust * computeScore(subject.slice(basePos + 1, end + 1), subject_lw.slice(basePos + 1, end + 1), preparedQuery);\n    alpha = 0.5 * tau_depth / (tau_depth + countDir(subject, end + 1, pathSeparator));\n    return alpha * basePathScore + (1 - alpha) * fullPathScore * scoreSize(0, file_coeff * fileLength);\n  };\n  exports.countDir = countDir = function (path, end, pathSeparator) {\n    var count, i;\n    if (end < 1) {\n      return 0;\n    }\n    count = 0;\n    i = -1;\n    while (++i < end && path[i] === pathSeparator) {\n      continue;\n    }\n    while (++i < end) {\n      if (path[i] === pathSeparator) {\n        count++;\n        while (++i < end && path[i] === pathSeparator) {\n          continue;\n        }\n      }\n    }\n    return count;\n  };\n  exports.getExtension = getExtension = function (str) {\n    var pos;\n    pos = str.lastIndexOf(\".\");\n    if (pos < 0) {\n      return \"\";\n    } else {\n      return str.substr(pos + 1);\n    }\n  };\n  getExtensionScore = function (candidate, ext, startPos, endPos, maxDepth) {\n    var m, matched, n, pos;\n    if (!ext.length) {\n      return 0;\n    }\n    pos = candidate.lastIndexOf(\".\", endPos);\n    if (!(pos > startPos)) {\n      return 0;\n    }\n    n = ext.length;\n    m = endPos - pos;\n    if (m < n) {\n      n = m;\n      m = ext.length;\n    }\n    pos++;\n    matched = -1;\n    while (++matched < n) {\n      if (candidate[pos + matched] !== ext[matched]) {\n        break;\n      }\n    }\n    if (matched === 0 && maxDepth > 0) {\n      return 0.9 * getExtensionScore(candidate, ext, startPos, pos - 2, maxDepth - 1);\n    }\n    return matched / m;\n  };\n}).call(this);","map":{"version":3,"names":["computeScore","countDir","file_coeff","getExtension","getExtensionScore","isMatch","scorePath","scoreSize","tau_depth","_ref","require","exports","score","string","query","options","allowErrors","preparedQuery","string_lw","core_lw","core_up","toLowerCase","Math","ceil","subject","subject_lw","fullPathScore","alpha","basePathScore","basePos","depth","end","extAdjust","fileLength","pathSeparator","useExtensionBonus","length","lastIndexOf","ext","slice","path","count","i","str","pos","substr","candidate","startPos","endPos","maxDepth","m","matched","n","call"],"sources":["D:/SPRING BOOT/reservation-salle/reservation-salle-front/node_modules/fuzzaldrin-plus/lib/pathScorer.js"],"sourcesContent":["(function() {\n  var computeScore, countDir, file_coeff, getExtension, getExtensionScore, isMatch, scorePath, scoreSize, tau_depth, _ref;\n\n  _ref = require('./scorer'), isMatch = _ref.isMatch, computeScore = _ref.computeScore, scoreSize = _ref.scoreSize;\n\n  tau_depth = 20;\n\n  file_coeff = 2.5;\n\n  exports.score = function(string, query, options) {\n    var allowErrors, preparedQuery, score, string_lw;\n    preparedQuery = options.preparedQuery, allowErrors = options.allowErrors;\n    if (!(allowErrors || isMatch(string, preparedQuery.core_lw, preparedQuery.core_up))) {\n      return 0;\n    }\n    string_lw = string.toLowerCase();\n    score = computeScore(string, string_lw, preparedQuery);\n    score = scorePath(string, string_lw, score, options);\n    return Math.ceil(score);\n  };\n\n  scorePath = function(subject, subject_lw, fullPathScore, options) {\n    var alpha, basePathScore, basePos, depth, end, extAdjust, fileLength, pathSeparator, preparedQuery, useExtensionBonus;\n    if (fullPathScore === 0) {\n      return 0;\n    }\n    preparedQuery = options.preparedQuery, useExtensionBonus = options.useExtensionBonus, pathSeparator = options.pathSeparator;\n    end = subject.length - 1;\n    while (subject[end] === pathSeparator) {\n      end--;\n    }\n    basePos = subject.lastIndexOf(pathSeparator, end);\n    fileLength = end - basePos;\n    extAdjust = 1.0;\n    if (useExtensionBonus) {\n      extAdjust += getExtensionScore(subject_lw, preparedQuery.ext, basePos, end, 2);\n      fullPathScore *= extAdjust;\n    }\n    if (basePos === -1) {\n      return fullPathScore;\n    }\n    depth = preparedQuery.depth;\n    while (basePos > -1 && depth-- > 0) {\n      basePos = subject.lastIndexOf(pathSeparator, basePos - 1);\n    }\n    basePathScore = basePos === -1 ? fullPathScore : extAdjust * computeScore(subject.slice(basePos + 1, end + 1), subject_lw.slice(basePos + 1, end + 1), preparedQuery);\n    alpha = 0.5 * tau_depth / (tau_depth + countDir(subject, end + 1, pathSeparator));\n    return alpha * basePathScore + (1 - alpha) * fullPathScore * scoreSize(0, file_coeff * fileLength);\n  };\n\n  exports.countDir = countDir = function(path, end, pathSeparator) {\n    var count, i;\n    if (end < 1) {\n      return 0;\n    }\n    count = 0;\n    i = -1;\n    while (++i < end && path[i] === pathSeparator) {\n      continue;\n    }\n    while (++i < end) {\n      if (path[i] === pathSeparator) {\n        count++;\n        while (++i < end && path[i] === pathSeparator) {\n          continue;\n        }\n      }\n    }\n    return count;\n  };\n\n  exports.getExtension = getExtension = function(str) {\n    var pos;\n    pos = str.lastIndexOf(\".\");\n    if (pos < 0) {\n      return \"\";\n    } else {\n      return str.substr(pos + 1);\n    }\n  };\n\n  getExtensionScore = function(candidate, ext, startPos, endPos, maxDepth) {\n    var m, matched, n, pos;\n    if (!ext.length) {\n      return 0;\n    }\n    pos = candidate.lastIndexOf(\".\", endPos);\n    if (!(pos > startPos)) {\n      return 0;\n    }\n    n = ext.length;\n    m = endPos - pos;\n    if (m < n) {\n      n = m;\n      m = ext.length;\n    }\n    pos++;\n    matched = -1;\n    while (++matched < n) {\n      if (candidate[pos + matched] !== ext[matched]) {\n        break;\n      }\n    }\n    if (matched === 0 && maxDepth > 0) {\n      return 0.9 * getExtensionScore(candidate, ext, startPos, pos - 2, maxDepth - 1);\n    }\n    return matched / m;\n  };\n\n}).call(this);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}