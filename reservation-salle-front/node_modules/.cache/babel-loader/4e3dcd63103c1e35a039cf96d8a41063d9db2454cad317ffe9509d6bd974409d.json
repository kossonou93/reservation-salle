{"ast":null,"code":"var previousOverflow = [];\nvar previousPaddingRight = [];\n/**\n * Toggle the body scroll / overflow and additional styling\n * necessary to preserve scroll position and body width (scrollbar replacement)\n *\n * @param {boolean} preventScroll - whether or not to prevent body scrolling\n */\n\nexport default function preventBodyScroll(preventScroll) {\n  /** Get the width before toggling the style so we can calculate the scrollbar width for a smooth, jankless style change */\n  var _document$body$getBou = document.body.getBoundingClientRect(),\n    width = _document$body$getBou.width;\n  /** Apply or remove overflow style */\n\n  if (preventScroll) {\n    previousOverflow.push(document.body.style.overflow);\n    document.body.style.overflow = 'hidden';\n  } else {\n    document.body.style.overflow = previousOverflow.pop() || '';\n  }\n  /** Get the _new width_ of the body (this will tell us the scrollbar width) */\n\n  var newWidth = document.body.getBoundingClientRect().width;\n  var scrollBarWidth = newWidth - width;\n  /** If there's a diff due to scrollbars, then account for it with padding */\n\n  if (preventScroll) {\n    previousPaddingRight.push(document.body.style.paddingRight);\n    document.body.style.paddingRight = Math.max(0, scrollBarWidth || 0) + 'px';\n  } else {\n    document.body.style.paddingRight = previousPaddingRight.pop() || '';\n  }\n}","map":{"version":3,"names":["previousOverflow","previousPaddingRight","preventBodyScroll","preventScroll","_document$body$getBou","document","body","getBoundingClientRect","width","push","style","overflow","pop","newWidth","scrollBarWidth","paddingRight","Math","max"],"sources":["D:/SPRING BOOT/reservation-salle/reservation-salle-front/node_modules/evergreen-ui/esm/lib/prevent-body-scroll.js"],"sourcesContent":["var previousOverflow = [];\nvar previousPaddingRight = [];\n/**\n * Toggle the body scroll / overflow and additional styling\n * necessary to preserve scroll position and body width (scrollbar replacement)\n *\n * @param {boolean} preventScroll - whether or not to prevent body scrolling\n */\n\nexport default function preventBodyScroll(preventScroll) {\n  /** Get the width before toggling the style so we can calculate the scrollbar width for a smooth, jankless style change */\n  var _document$body$getBou = document.body.getBoundingClientRect(),\n      width = _document$body$getBou.width;\n  /** Apply or remove overflow style */\n\n\n  if (preventScroll) {\n    previousOverflow.push(document.body.style.overflow);\n    document.body.style.overflow = 'hidden';\n  } else {\n    document.body.style.overflow = previousOverflow.pop() || '';\n  }\n  /** Get the _new width_ of the body (this will tell us the scrollbar width) */\n\n\n  var newWidth = document.body.getBoundingClientRect().width;\n  var scrollBarWidth = newWidth - width;\n  /** If there's a diff due to scrollbars, then account for it with padding */\n\n  if (preventScroll) {\n    previousPaddingRight.push(document.body.style.paddingRight);\n    document.body.style.paddingRight = Math.max(0, scrollBarWidth || 0) + 'px';\n  } else {\n    document.body.style.paddingRight = previousPaddingRight.pop() || '';\n  }\n}"],"mappings":"AAAA,IAAIA,gBAAgB,GAAG,EAAE;AACzB,IAAIC,oBAAoB,GAAG,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,iBAAiBA,CAACC,aAAa,EAAE;EACvD;EACA,IAAIC,qBAAqB,GAAGC,QAAQ,CAACC,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAC7DC,KAAK,GAAGJ,qBAAqB,CAACI,KAAK;EACvC;;EAGA,IAAIL,aAAa,EAAE;IACjBH,gBAAgB,CAACS,IAAI,CAACJ,QAAQ,CAACC,IAAI,CAACI,KAAK,CAACC,QAAQ,CAAC;IACnDN,QAAQ,CAACC,IAAI,CAACI,KAAK,CAACC,QAAQ,GAAG,QAAQ;EACzC,CAAC,MAAM;IACLN,QAAQ,CAACC,IAAI,CAACI,KAAK,CAACC,QAAQ,GAAGX,gBAAgB,CAACY,GAAG,CAAC,CAAC,IAAI,EAAE;EAC7D;EACA;;EAGA,IAAIC,QAAQ,GAAGR,QAAQ,CAACC,IAAI,CAACC,qBAAqB,CAAC,CAAC,CAACC,KAAK;EAC1D,IAAIM,cAAc,GAAGD,QAAQ,GAAGL,KAAK;EACrC;;EAEA,IAAIL,aAAa,EAAE;IACjBF,oBAAoB,CAACQ,IAAI,CAACJ,QAAQ,CAACC,IAAI,CAACI,KAAK,CAACK,YAAY,CAAC;IAC3DV,QAAQ,CAACC,IAAI,CAACI,KAAK,CAACK,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,cAAc,IAAI,CAAC,CAAC,GAAG,IAAI;EAC5E,CAAC,MAAM;IACLT,QAAQ,CAACC,IAAI,CAACI,KAAK,CAACK,YAAY,GAAGd,oBAAoB,CAACW,GAAG,CAAC,CAAC,IAAI,EAAE;EACrE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}