{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"allowAutoHeight\", \"children\", \"defaultHeight\", \"estimatedItemSize\", \"height\", \"onScroll\", \"overscanCount\", \"scrollOffset\", \"scrollToAlignment\", \"scrollToIndex\", \"useAverageAutoHeightEstimation\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport React, { memo, useState, useEffect, useRef } from 'react';\nimport VirtualList from '@segment/react-tiny-virtual-list';\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport { useForceUpdate } from '../../hooks';\nimport { Pane } from '../../layers';\nvar TableVirtualBody = /*#__PURE__*/memo(function TableVirtualBody(props) {\n  var _props$allowAutoHeigh = props.allowAutoHeight,\n    allowAutoHeight = _props$allowAutoHeigh === void 0 ? false : _props$allowAutoHeigh,\n    inputChildren = props.children,\n    _props$defaultHeight = props.defaultHeight,\n    defaultHeight = _props$defaultHeight === void 0 ? 48 : _props$defaultHeight,\n    estimatedItemSize = props.estimatedItemSize,\n    paneHeight = props.height,\n    onScroll = props.onScroll,\n    _props$overscanCount = props.overscanCount,\n    overscanCount = _props$overscanCount === void 0 ? 5 : _props$overscanCount,\n    scrollOffset = props.scrollOffset,\n    scrollToAlignment = props.scrollToAlignment,\n    scrollToIndex = props.scrollToIndex,\n    _props$useAverageAuto = props.useAverageAutoHeightEstimation,\n    useAverageAutoHeightEstimation = _props$useAverageAuto === void 0 ? true : _props$useAverageAuto,\n    rest = _objectWithoutProperties(props, _excluded);\n  var forceUpdate = useForceUpdate();\n  var autoHeights = [];\n  var autoHeightRefs = [];\n  var averageAutoHeight = defaultHeight;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    paneRef = _useState2[0],\n    setPaneRef = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isIntegerHeight = _useState4[0],\n    setIsIntegerHeight = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    calculatedHeight = _useState6[0],\n    setCalculatedHeight = _useState6[1];\n  var requestId = useRef(null);\n  var updateOnResize = function updateOnResize() {\n    autoHeights = [];\n    autoHeightRefs = [];\n    averageAutoHeight = defaultHeight; // Simply return when we now the height of the pane is fixed.\n\n    if (isIntegerHeight) return; // Return if we are in a weird edge case in which the ref is no longer valid.\n\n    if (paneRef && paneRef instanceof Node) {\n      var tempCalculatedHeight = paneRef.offsetHeight;\n      if (tempCalculatedHeight > 0) {\n        // Save the calculated height which is needed for the VirtualList.\n        setCalculatedHeight(tempCalculatedHeight); // Prevent updateOnResize being called recursively when there is a valid height.\n\n        return;\n      }\n    } // When height is still 0 (or paneRef is not valid) try recursively until success.\n\n    requestId.current = requestAnimationFrame(function () {\n      updateOnResize();\n    });\n  };\n  var onResize = debounce(updateOnResize, 200);\n  useEffect(function () {\n    if (props.height !== calculatedHeight) {\n      setIsIntegerHeight(Number.isInteger(props.height));\n    }\n  }, [props.height]);\n  useEffect(function () {\n    if (paneRef && paneRef instanceof Node) {\n      updateOnResize();\n    }\n  }, [paneRef]); // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // By passing an empty array, will only run on first render, the function returned\n  // will be called on component unmount\n\n  useEffect(function () {\n    updateOnResize();\n    window.addEventListener('resize', onResize, false);\n    return function () {\n      window.removeEventListener('resize', onResize);\n      cancelAnimationFrame(requestId.current);\n    };\n  }, []);\n  /**\n   * This function will process all items that have height=\"auto\" set.\n   * It will loop through all refs and get calculate the height.\n   */\n\n  var processAutoHeights = function processAutoHeights() {\n    var isUpdated = false; // This will determine the averageAutoHeight.\n\n    var total = 0;\n    var totalAmount = 0; // Loop through all of the refs that have height=\"auto\".\n\n    autoHeightRefs.forEach(function (ref, index) {\n      // If the height is already calculated, skip it,\n      // but calculate the height for the total.\n      if (autoHeights[index]) {\n        total += autoHeights[index];\n        totalAmount += 1;\n        return;\n      } // Make sure the ref has a child\n\n      if (ref && ref.childNodes && ref.childNodes[0] && Number.isInteger(ref.childNodes[0].offsetHeight)) {\n        var height = ref.childNodes[0].offsetHeight; // Add to the total to calculate the averageAutoHeight.\n\n        total += height;\n        totalAmount += 1; // Cache the height.\n\n        autoHeights[index] = height; // Set the update flag to true.\n\n        isUpdated = true;\n      }\n    }); // Save the average height.\n\n    averageAutoHeight = total / totalAmount; // There are some new heights detected that had previously not been calculated.\n    // Call forceUpdate to make sure the virtual list renders again.\n\n    if (isUpdated) forceUpdate();\n  };\n  var onVirtualHelperRef = function onVirtualHelperRef(index, ref) {\n    autoHeightRefs[index] = ref;\n    requestAnimationFrame(function () {\n      processAutoHeights();\n    });\n  };\n  var getItemSize = function getItemSize(children) {\n    // Prefer to return a array of all heights.\n    if (!allowAutoHeight) {\n      return children.map(function (child) {\n        if (! /*#__PURE__*/React.isValidElement(child)) return defaultHeight;\n        var height = child.props.height;\n        if (Number.isInteger(height)) {\n          return height;\n        }\n        return defaultHeight;\n      });\n    } // If allowAutoHeight is true, return a function instead.\n\n    var itemSizeFn = function itemSizeFn(index) {\n      if (! /*#__PURE__*/React.isValidElement(children[index])) return defaultHeight;\n      var height = children[index].props.height; // When the height is number simply, simply return it.\n\n      if (Number.isInteger(height)) {\n        return height;\n      } // When allowAutoHeight is set and  the height is set to \"auto\"...\n\n      if (allowAutoHeight && children[index].props.height === 'auto') {\n        // ... and the height is calculated, return the calculated height.\n        if (autoHeights[index]) return autoHeights[index]; // ... if the height is not yet calculated, return the averge\n\n        if (useAverageAutoHeightEstimation) return averageAutoHeight;\n      } // Return the default height.\n\n      return defaultHeight;\n    };\n    return itemSizeFn;\n  }; // Children always needs to be an array.\n\n  var children = Array.isArray(inputChildren) ? inputChildren : React.Children.toArray(inputChildren);\n  var itemSize = getItemSize(children);\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    \"data-evergreen-table-body\": true,\n    ref: setPaneRef,\n    height: paneHeight,\n    flex: \"1\",\n    overflow: \"hidden\"\n  }, rest), /*#__PURE__*/React.createElement(VirtualList, {\n    height: isIntegerHeight ? paneHeight : calculatedHeight,\n    width: \"100%\",\n    estimatedItemSize: allowAutoHeight && useAverageAutoHeightEstimation ? averageAutoHeight : estimatedItemSize || null,\n    itemSize: itemSize,\n    overscanCount: overscanCount,\n    itemCount: React.Children.count(children),\n    scrollToIndex: scrollToIndex,\n    scrollOffset: scrollOffset,\n    scrollToAlignment: scrollToAlignment,\n    onScroll: onScroll,\n    renderItem: function renderItem(_ref) {\n      var index = _ref.index,\n        style = _ref.style;\n      var child = children[index];\n      var key = child.key || index;\n      var props = {\n        key: key,\n        style: style\n      }; // If some children are strings by accident, support this gracefully.\n\n      if (! /*#__PURE__*/React.isValidElement(child)) {\n        if (typeof child === 'string') {\n          return /*#__PURE__*/React.createElement(\"div\", props, child);\n        }\n        return /*#__PURE__*/React.createElement(\"div\", props, \"\\xA0\");\n      } // When allowing height=\"auto\" for rows, and a auto height item is\n      // rendered for the first time...\n\n      if (allowAutoHeight && /*#__PURE__*/React.isValidElement(child) && child.props.height === 'auto' &&\n      // ... and only when the height is not already been calculated.\n      !autoHeights[index]) {\n        // ... render the item in a helper div, the ref is used to calculate\n        // the height of its children.\n        return /*#__PURE__*/React.createElement(\"div\", _extends({\n          ref: function ref(_ref2) {\n            return onVirtualHelperRef(index, _ref2);\n          },\n          \"data-virtual-index\": index\n        }, props, {\n          style: _objectSpread({\n            opacity: 0\n          }, props.style)\n        }), child);\n      } // When allowAutoHeight is false, or when the height is known.\n      // Simply render the item.\n\n      return /*#__PURE__*/React.cloneElement(child, props);\n    }\n  }));\n});\nTableVirtualBody.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * Children needs to be an array of a single node.\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  /**\n   * Default height of each row.\n   * 48 is the default height of a TableRow.\n   */\n  defaultHeight: PropTypes.number,\n  /**\n   * When true, support `height=\"auto\"` on children being rendered.\n   * This is somewhat of an expirmental feature.\n   */\n  allowAutoHeight: PropTypes.bool,\n  /**\n   * The overscanCount property passed to react-tiny-virtual-list.\n   */\n  overscanCount: PropTypes.number,\n  /**\n   * When passed, this is used as the `estimatedItemSize` in react-tiny-virtual-list.\n   * Only when `allowAutoHeight` and`useAverageAutoHeightEstimation` are false.\n   */\n  estimatedItemSize: PropTypes.number,\n  /**\n   * When allowAutoHeight is true and this prop is true, the estimated height\n   * will be computed based on the average height of auto height rows.\n   */\n  useAverageAutoHeightEstimation: PropTypes.bool,\n  /**\n   * The scrollToIndex property passed to react-tiny-virtual-list\n   */\n  scrollToIndex: PropTypes.number,\n  /**\n   * The scrollOffset property passed to react-tiny-virtual-list\n   */\n  scrollOffset: PropTypes.number,\n  /**\n   * The scrollToAlignment property passed to react-tiny-virtual-list\n   */\n  scrollToAlignment: PropTypes.oneOf(['start', 'center', 'end', 'auto']),\n  /**\n   * The onScroll callback passed to react-tiny-virtual-list\n   */\n  onScroll: PropTypes.func\n});\nexport default TableVirtualBody;","map":{"version":3,"names":["_extends","_defineProperty","_slicedToArray","_objectWithoutProperties","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","React","memo","useState","useEffect","useRef","VirtualList","debounce","PropTypes","useForceUpdate","Pane","TableVirtualBody","props","_props$allowAutoHeigh","allowAutoHeight","inputChildren","children","_props$defaultHeight","defaultHeight","estimatedItemSize","paneHeight","height","onScroll","_props$overscanCount","overscanCount","scrollOffset","scrollToAlignment","scrollToIndex","_props$useAverageAuto","useAverageAutoHeightEstimation","rest","forceUpdate","autoHeights","autoHeightRefs","averageAutoHeight","_useState","_useState2","paneRef","setPaneRef","_useState3","_useState4","isIntegerHeight","setIsIntegerHeight","_useState5","_useState6","calculatedHeight","setCalculatedHeight","requestId","updateOnResize","Node","tempCalculatedHeight","offsetHeight","current","requestAnimationFrame","onResize","Number","isInteger","window","addEventListener","removeEventListener","cancelAnimationFrame","processAutoHeights","isUpdated","total","totalAmount","ref","index","childNodes","onVirtualHelperRef","getItemSize","map","child","isValidElement","itemSizeFn","Array","isArray","Children","toArray","itemSize","createElement","flex","overflow","width","itemCount","count","renderItem","_ref","style","_ref2","opacity","cloneElement","propTypes","oneOfType","arrayOf","node","number","bool","oneOf","func"],"sources":["D:/SPRING BOOT/reservation-salle/reservation-salle-front/node_modules/evergreen-ui/esm/table/src/TableVirtualBody.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"allowAutoHeight\", \"children\", \"defaultHeight\", \"estimatedItemSize\", \"height\", \"onScroll\", \"overscanCount\", \"scrollOffset\", \"scrollToAlignment\", \"scrollToIndex\", \"useAverageAutoHeightEstimation\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { memo, useState, useEffect, useRef } from 'react';\nimport VirtualList from '@segment/react-tiny-virtual-list';\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport { useForceUpdate } from '../../hooks';\nimport { Pane } from '../../layers';\nvar TableVirtualBody = /*#__PURE__*/memo(function TableVirtualBody(props) {\n  var _props$allowAutoHeigh = props.allowAutoHeight,\n      allowAutoHeight = _props$allowAutoHeigh === void 0 ? false : _props$allowAutoHeigh,\n      inputChildren = props.children,\n      _props$defaultHeight = props.defaultHeight,\n      defaultHeight = _props$defaultHeight === void 0 ? 48 : _props$defaultHeight,\n      estimatedItemSize = props.estimatedItemSize,\n      paneHeight = props.height,\n      onScroll = props.onScroll,\n      _props$overscanCount = props.overscanCount,\n      overscanCount = _props$overscanCount === void 0 ? 5 : _props$overscanCount,\n      scrollOffset = props.scrollOffset,\n      scrollToAlignment = props.scrollToAlignment,\n      scrollToIndex = props.scrollToIndex,\n      _props$useAverageAuto = props.useAverageAutoHeightEstimation,\n      useAverageAutoHeightEstimation = _props$useAverageAuto === void 0 ? true : _props$useAverageAuto,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var forceUpdate = useForceUpdate();\n  var autoHeights = [];\n  var autoHeightRefs = [];\n  var averageAutoHeight = defaultHeight;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      paneRef = _useState2[0],\n      setPaneRef = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isIntegerHeight = _useState4[0],\n      setIsIntegerHeight = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      calculatedHeight = _useState6[0],\n      setCalculatedHeight = _useState6[1];\n\n  var requestId = useRef(null);\n\n  var updateOnResize = function updateOnResize() {\n    autoHeights = [];\n    autoHeightRefs = [];\n    averageAutoHeight = defaultHeight; // Simply return when we now the height of the pane is fixed.\n\n    if (isIntegerHeight) return; // Return if we are in a weird edge case in which the ref is no longer valid.\n\n    if (paneRef && paneRef instanceof Node) {\n      var tempCalculatedHeight = paneRef.offsetHeight;\n\n      if (tempCalculatedHeight > 0) {\n        // Save the calculated height which is needed for the VirtualList.\n        setCalculatedHeight(tempCalculatedHeight); // Prevent updateOnResize being called recursively when there is a valid height.\n\n        return;\n      }\n    } // When height is still 0 (or paneRef is not valid) try recursively until success.\n\n\n    requestId.current = requestAnimationFrame(function () {\n      updateOnResize();\n    });\n  };\n\n  var onResize = debounce(updateOnResize, 200);\n  useEffect(function () {\n    if (props.height !== calculatedHeight) {\n      setIsIntegerHeight(Number.isInteger(props.height));\n    }\n  }, [props.height]);\n  useEffect(function () {\n    if (paneRef && paneRef instanceof Node) {\n      updateOnResize();\n    }\n  }, [paneRef]); // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // By passing an empty array, will only run on first render, the function returned\n  // will be called on component unmount\n\n  useEffect(function () {\n    updateOnResize();\n    window.addEventListener('resize', onResize, false);\n    return function () {\n      window.removeEventListener('resize', onResize);\n      cancelAnimationFrame(requestId.current);\n    };\n  }, []);\n  /**\n   * This function will process all items that have height=\"auto\" set.\n   * It will loop through all refs and get calculate the height.\n   */\n\n  var processAutoHeights = function processAutoHeights() {\n    var isUpdated = false; // This will determine the averageAutoHeight.\n\n    var total = 0;\n    var totalAmount = 0; // Loop through all of the refs that have height=\"auto\".\n\n    autoHeightRefs.forEach(function (ref, index) {\n      // If the height is already calculated, skip it,\n      // but calculate the height for the total.\n      if (autoHeights[index]) {\n        total += autoHeights[index];\n        totalAmount += 1;\n        return;\n      } // Make sure the ref has a child\n\n\n      if (ref && ref.childNodes && ref.childNodes[0] && Number.isInteger(ref.childNodes[0].offsetHeight)) {\n        var height = ref.childNodes[0].offsetHeight; // Add to the total to calculate the averageAutoHeight.\n\n        total += height;\n        totalAmount += 1; // Cache the height.\n\n        autoHeights[index] = height; // Set the update flag to true.\n\n        isUpdated = true;\n      }\n    }); // Save the average height.\n\n    averageAutoHeight = total / totalAmount; // There are some new heights detected that had previously not been calculated.\n    // Call forceUpdate to make sure the virtual list renders again.\n\n    if (isUpdated) forceUpdate();\n  };\n\n  var onVirtualHelperRef = function onVirtualHelperRef(index, ref) {\n    autoHeightRefs[index] = ref;\n    requestAnimationFrame(function () {\n      processAutoHeights();\n    });\n  };\n\n  var getItemSize = function getItemSize(children) {\n    // Prefer to return a array of all heights.\n    if (!allowAutoHeight) {\n      return children.map(function (child) {\n        if (! /*#__PURE__*/React.isValidElement(child)) return defaultHeight;\n        var height = child.props.height;\n\n        if (Number.isInteger(height)) {\n          return height;\n        }\n\n        return defaultHeight;\n      });\n    } // If allowAutoHeight is true, return a function instead.\n\n\n    var itemSizeFn = function itemSizeFn(index) {\n      if (! /*#__PURE__*/React.isValidElement(children[index])) return defaultHeight;\n      var height = children[index].props.height; // When the height is number simply, simply return it.\n\n      if (Number.isInteger(height)) {\n        return height;\n      } // When allowAutoHeight is set and  the height is set to \"auto\"...\n\n\n      if (allowAutoHeight && children[index].props.height === 'auto') {\n        // ... and the height is calculated, return the calculated height.\n        if (autoHeights[index]) return autoHeights[index]; // ... if the height is not yet calculated, return the averge\n\n        if (useAverageAutoHeightEstimation) return averageAutoHeight;\n      } // Return the default height.\n\n\n      return defaultHeight;\n    };\n\n    return itemSizeFn;\n  }; // Children always needs to be an array.\n\n\n  var children = Array.isArray(inputChildren) ? inputChildren : React.Children.toArray(inputChildren);\n  var itemSize = getItemSize(children);\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    \"data-evergreen-table-body\": true,\n    ref: setPaneRef,\n    height: paneHeight,\n    flex: \"1\",\n    overflow: \"hidden\"\n  }, rest), /*#__PURE__*/React.createElement(VirtualList, {\n    height: isIntegerHeight ? paneHeight : calculatedHeight,\n    width: \"100%\",\n    estimatedItemSize: allowAutoHeight && useAverageAutoHeightEstimation ? averageAutoHeight : estimatedItemSize || null,\n    itemSize: itemSize,\n    overscanCount: overscanCount,\n    itemCount: React.Children.count(children),\n    scrollToIndex: scrollToIndex,\n    scrollOffset: scrollOffset,\n    scrollToAlignment: scrollToAlignment,\n    onScroll: onScroll,\n    renderItem: function renderItem(_ref) {\n      var index = _ref.index,\n          style = _ref.style;\n      var child = children[index];\n      var key = child.key || index;\n      var props = {\n        key: key,\n        style: style\n      }; // If some children are strings by accident, support this gracefully.\n\n      if (! /*#__PURE__*/React.isValidElement(child)) {\n        if (typeof child === 'string') {\n          return /*#__PURE__*/React.createElement(\"div\", props, child);\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", props, \"\\xA0\");\n      } // When allowing height=\"auto\" for rows, and a auto height item is\n      // rendered for the first time...\n\n\n      if (allowAutoHeight && /*#__PURE__*/React.isValidElement(child) && child.props.height === 'auto' && // ... and only when the height is not already been calculated.\n      !autoHeights[index]) {\n        // ... render the item in a helper div, the ref is used to calculate\n        // the height of its children.\n        return /*#__PURE__*/React.createElement(\"div\", _extends({\n          ref: function ref(_ref2) {\n            return onVirtualHelperRef(index, _ref2);\n          },\n          \"data-virtual-index\": index\n        }, props, {\n          style: _objectSpread({\n            opacity: 0\n          }, props.style)\n        }), child);\n      } // When allowAutoHeight is false, or when the height is known.\n      // Simply render the item.\n\n\n      return /*#__PURE__*/React.cloneElement(child, props);\n    }\n  }));\n});\nTableVirtualBody.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * Children needs to be an array of a single node.\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n\n  /**\n   * Default height of each row.\n   * 48 is the default height of a TableRow.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * When true, support `height=\"auto\"` on children being rendered.\n   * This is somewhat of an expirmental feature.\n   */\n  allowAutoHeight: PropTypes.bool,\n\n  /**\n   * The overscanCount property passed to react-tiny-virtual-list.\n   */\n  overscanCount: PropTypes.number,\n\n  /**\n   * When passed, this is used as the `estimatedItemSize` in react-tiny-virtual-list.\n   * Only when `allowAutoHeight` and`useAverageAutoHeightEstimation` are false.\n   */\n  estimatedItemSize: PropTypes.number,\n\n  /**\n   * When allowAutoHeight is true and this prop is true, the estimated height\n   * will be computed based on the average height of auto height rows.\n   */\n  useAverageAutoHeightEstimation: PropTypes.bool,\n\n  /**\n   * The scrollToIndex property passed to react-tiny-virtual-list\n   */\n  scrollToIndex: PropTypes.number,\n\n  /**\n   * The scrollOffset property passed to react-tiny-virtual-list\n   */\n  scrollOffset: PropTypes.number,\n\n  /**\n   * The scrollToAlignment property passed to react-tiny-virtual-list\n   */\n  scrollToAlignment: PropTypes.oneOf(['start', 'center', 'end', 'auto']),\n\n  /**\n   * The onScroll callback passed to react-tiny-virtual-list\n   */\n  onScroll: PropTypes.func\n});\nexport default TableVirtualBody;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}