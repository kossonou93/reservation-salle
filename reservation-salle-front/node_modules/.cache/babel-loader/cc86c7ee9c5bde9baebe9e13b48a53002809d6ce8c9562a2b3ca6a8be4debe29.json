{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport isEmpty from 'lodash.isempty';\nimport uniqBy from 'lodash.uniqby';\nimport FileRejectionReason from '../../../constants/src/FileRejectionReason';\nimport hasValue from '../../../lib/has-value';\nimport { getAcceptedTypesMessage, getFileSizeMessage, getMaxFilesMessage } from './messages';\n/**\n * @typedef {object} FileRejection\n * @property {File} file\n * @property {string} message Informative message to display to the user for why the file was rejected\n * @property {string} reason Error code/enum to denote why the file was rejected\n */\n\n/**\n * Returns a list of objects containing rejected files and why they were rejected based on the provided options\n * @param {File[]} files\n * @param {import('./split-files').SplitFilesOptions | undefined} options\n * @returns {FileRejection[]}\n */\n\nvar getFileRejections = function getFileRejections(files, options) {\n  if (options == null || isEmpty(files)) {\n    return [];\n  }\n  var acceptedMimeTypes = options.acceptedMimeTypes,\n    currentCount = options.currentFileCount,\n    maxFiles = options.maxFiles,\n    maxSizeInBytes = options.maxSizeInBytes;\n  var typeRejections = files.map(function (file) {\n    if (isEmpty(acceptedMimeTypes) || acceptedMimeTypes !== null && acceptedMimeTypes !== void 0 && acceptedMimeTypes.some(function (type) {\n      return file.type === type;\n    })) {\n      return;\n    }\n    return {\n      file: file,\n      reason: FileRejectionReason.InvalidFileType,\n      message: \"This file is not an accepted format. \".concat(getAcceptedTypesMessage(acceptedMimeTypes))\n    };\n  });\n  var sizeRejections = files.map(function (file) {\n    if (maxSizeInBytes == null || maxSizeInBytes === 0 || file.size <= maxSizeInBytes) {\n      return;\n    }\n    return {\n      file: file,\n      reason: FileRejectionReason.FileTooLarge,\n      message: \"This file is too big. \".concat(getFileSizeMessage(maxSizeInBytes))\n    };\n  });\n  var countRejections = files.map(function (file, index) {\n    if (maxFiles == null) {\n      return;\n    }\n    var fileNumber = index + 1;\n    if ((currentCount !== null && currentCount !== void 0 ? currentCount : 0) + fileNumber <= maxFiles) {\n      return;\n    }\n    return {\n      file: file,\n      reason: FileRejectionReason.OverFileLimit,\n      message: getMaxFilesMessage(maxFiles)\n    };\n  }); // Type rejections are arguably more important than size rejections, so those will take priority\n\n  var fileRejections = [].concat(_toConsumableArray(typeRejections), _toConsumableArray(sizeRejections), _toConsumableArray(countRejections)).filter(hasValue);\n  return uniqBy(fileRejections, function (rejection) {\n    return rejection.file;\n  });\n};\nexport default getFileRejections;","map":{"version":3,"names":["_toConsumableArray","isEmpty","uniqBy","FileRejectionReason","hasValue","getAcceptedTypesMessage","getFileSizeMessage","getMaxFilesMessage","getFileRejections","files","options","acceptedMimeTypes","currentCount","currentFileCount","maxFiles","maxSizeInBytes","typeRejections","map","file","some","type","reason","InvalidFileType","message","concat","sizeRejections","size","FileTooLarge","countRejections","index","fileNumber","OverFileLimit","fileRejections","filter","rejection"],"sources":["D:/SPRING BOOT/reservation-salle/reservation-salle-front/node_modules/evergreen-ui/esm/file-uploader/src/utils/get-file-rejections.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport isEmpty from 'lodash.isempty';\nimport uniqBy from 'lodash.uniqby';\nimport FileRejectionReason from '../../../constants/src/FileRejectionReason';\nimport hasValue from '../../../lib/has-value';\nimport { getAcceptedTypesMessage, getFileSizeMessage, getMaxFilesMessage } from './messages';\n/**\n * @typedef {object} FileRejection\n * @property {File} file\n * @property {string} message Informative message to display to the user for why the file was rejected\n * @property {string} reason Error code/enum to denote why the file was rejected\n */\n\n/**\n * Returns a list of objects containing rejected files and why they were rejected based on the provided options\n * @param {File[]} files\n * @param {import('./split-files').SplitFilesOptions | undefined} options\n * @returns {FileRejection[]}\n */\n\nvar getFileRejections = function getFileRejections(files, options) {\n  if (options == null || isEmpty(files)) {\n    return [];\n  }\n\n  var acceptedMimeTypes = options.acceptedMimeTypes,\n      currentCount = options.currentFileCount,\n      maxFiles = options.maxFiles,\n      maxSizeInBytes = options.maxSizeInBytes;\n  var typeRejections = files.map(function (file) {\n    if (isEmpty(acceptedMimeTypes) || acceptedMimeTypes !== null && acceptedMimeTypes !== void 0 && acceptedMimeTypes.some(function (type) {\n      return file.type === type;\n    })) {\n      return;\n    }\n\n    return {\n      file: file,\n      reason: FileRejectionReason.InvalidFileType,\n      message: \"This file is not an accepted format. \".concat(getAcceptedTypesMessage(acceptedMimeTypes))\n    };\n  });\n  var sizeRejections = files.map(function (file) {\n    if (maxSizeInBytes == null || maxSizeInBytes === 0 || file.size <= maxSizeInBytes) {\n      return;\n    }\n\n    return {\n      file: file,\n      reason: FileRejectionReason.FileTooLarge,\n      message: \"This file is too big. \".concat(getFileSizeMessage(maxSizeInBytes))\n    };\n  });\n  var countRejections = files.map(function (file, index) {\n    if (maxFiles == null) {\n      return;\n    }\n\n    var fileNumber = index + 1;\n\n    if ((currentCount !== null && currentCount !== void 0 ? currentCount : 0) + fileNumber <= maxFiles) {\n      return;\n    }\n\n    return {\n      file: file,\n      reason: FileRejectionReason.OverFileLimit,\n      message: getMaxFilesMessage(maxFiles)\n    };\n  }); // Type rejections are arguably more important than size rejections, so those will take priority\n\n  var fileRejections = [].concat(_toConsumableArray(typeRejections), _toConsumableArray(sizeRejections), _toConsumableArray(countRejections)).filter(hasValue);\n  return uniqBy(fileRejections, function (rejection) {\n    return rejection.file;\n  });\n};\n\nexport default getFileRejections;"],"mappings":"AAAA,OAAOA,kBAAkB,MAAM,8CAA8C;AAC7E,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,mBAAmB,MAAM,4CAA4C;AAC5E,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,uBAAuB,EAAEC,kBAAkB,EAAEC,kBAAkB,QAAQ,YAAY;AAC5F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACjE,IAAIA,OAAO,IAAI,IAAI,IAAIT,OAAO,CAACQ,KAAK,CAAC,EAAE;IACrC,OAAO,EAAE;EACX;EAEA,IAAIE,iBAAiB,GAAGD,OAAO,CAACC,iBAAiB;IAC7CC,YAAY,GAAGF,OAAO,CAACG,gBAAgB;IACvCC,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;IAC3BC,cAAc,GAAGL,OAAO,CAACK,cAAc;EAC3C,IAAIC,cAAc,GAAGP,KAAK,CAACQ,GAAG,CAAC,UAAUC,IAAI,EAAE;IAC7C,IAAIjB,OAAO,CAACU,iBAAiB,CAAC,IAAIA,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,IAAIA,iBAAiB,CAACQ,IAAI,CAAC,UAAUC,IAAI,EAAE;MACrI,OAAOF,IAAI,CAACE,IAAI,KAAKA,IAAI;IAC3B,CAAC,CAAC,EAAE;MACF;IACF;IAEA,OAAO;MACLF,IAAI,EAAEA,IAAI;MACVG,MAAM,EAAElB,mBAAmB,CAACmB,eAAe;MAC3CC,OAAO,EAAE,uCAAuC,CAACC,MAAM,CAACnB,uBAAuB,CAACM,iBAAiB,CAAC;IACpG,CAAC;EACH,CAAC,CAAC;EACF,IAAIc,cAAc,GAAGhB,KAAK,CAACQ,GAAG,CAAC,UAAUC,IAAI,EAAE;IAC7C,IAAIH,cAAc,IAAI,IAAI,IAAIA,cAAc,KAAK,CAAC,IAAIG,IAAI,CAACQ,IAAI,IAAIX,cAAc,EAAE;MACjF;IACF;IAEA,OAAO;MACLG,IAAI,EAAEA,IAAI;MACVG,MAAM,EAAElB,mBAAmB,CAACwB,YAAY;MACxCJ,OAAO,EAAE,wBAAwB,CAACC,MAAM,CAAClB,kBAAkB,CAACS,cAAc,CAAC;IAC7E,CAAC;EACH,CAAC,CAAC;EACF,IAAIa,eAAe,GAAGnB,KAAK,CAACQ,GAAG,CAAC,UAAUC,IAAI,EAAEW,KAAK,EAAE;IACrD,IAAIf,QAAQ,IAAI,IAAI,EAAE;MACpB;IACF;IAEA,IAAIgB,UAAU,GAAGD,KAAK,GAAG,CAAC;IAE1B,IAAI,CAACjB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAGA,YAAY,GAAG,CAAC,IAAIkB,UAAU,IAAIhB,QAAQ,EAAE;MAClG;IACF;IAEA,OAAO;MACLI,IAAI,EAAEA,IAAI;MACVG,MAAM,EAAElB,mBAAmB,CAAC4B,aAAa;MACzCR,OAAO,EAAEhB,kBAAkB,CAACO,QAAQ;IACtC,CAAC;EACH,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAIkB,cAAc,GAAG,EAAE,CAACR,MAAM,CAACxB,kBAAkB,CAACgB,cAAc,CAAC,EAAEhB,kBAAkB,CAACyB,cAAc,CAAC,EAAEzB,kBAAkB,CAAC4B,eAAe,CAAC,CAAC,CAACK,MAAM,CAAC7B,QAAQ,CAAC;EAC5J,OAAOF,MAAM,CAAC8B,cAAc,EAAE,UAAUE,SAAS,EAAE;IACjD,OAAOA,SAAS,CAAChB,IAAI;EACvB,CAAC,CAAC;AACJ,CAAC;AAED,eAAeV,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}