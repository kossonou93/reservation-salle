{"ast":null,"code":"/* humanize.js - v1.8.2 */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\n/**\n * Copyright 2013-2016 HubSpotDev\n * MIT Licensed\n *\n * @module humanize.js\n */\n\n(function (root, factory) {\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return root.Humanize = factory();\n    });\n  } else {\n    root.Humanize = factory();\n  }\n})(this, function () {\n  //------------------------------------------------------------------------------\n  // Constants\n  //------------------------------------------------------------------------------\n\n  var TIME_FORMATS = [{\n    name: 'second',\n    value: 1e3\n  }, {\n    name: 'minute',\n    value: 6e4\n  }, {\n    name: 'hour',\n    value: 36e5\n  }, {\n    name: 'day',\n    value: 864e5\n  }, {\n    name: 'week',\n    value: 6048e5\n  }];\n  var LABELS_FOR_POWERS_OF_KILO = {\n    P: Math.pow(2, 50),\n    T: Math.pow(2, 40),\n    G: Math.pow(2, 30),\n    M: Math.pow(2, 20)\n  };\n\n  //------------------------------------------------------------------------------\n  // Helpers\n  //------------------------------------------------------------------------------\n\n  var exists = function exists(maybe) {\n    return typeof maybe !== 'undefined' && maybe !== null;\n  };\n  var isNaN = function isNaN(value) {\n    return value !== value;\n  }; // eslint-disable-line\n\n  var isFiniteNumber = function isFiniteNumber(value) {\n    return isFinite(value) && !isNaN(parseFloat(value));\n  };\n  var isArray = function isArray(value) {\n    var type = Object.prototype.toString.call(value);\n    return type === '[object Array]';\n  };\n\n  //------------------------------------------------------------------------------\n  // Humanize\n  //------------------------------------------------------------------------------\n\n  var Humanize = {\n    // Converts a large integer to a friendly text representation.\n\n    intword: function intword(number, charWidth) {\n      var decimals = arguments.length <= 2 || arguments[2] === undefined ? 2 : arguments[2];\n\n      /*\n      * This method is deprecated. Please use compactInteger instead.\n      * intword will be going away in the next major version.\n      */\n      return Humanize.compactInteger(number, decimals);\n    },\n    // Converts an integer into its most compact representation\n    compactInteger: function compactInteger(input) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      decimals = Math.max(decimals, 0);\n      var number = parseInt(input, 10);\n      var signString = number < 0 ? '-' : '';\n      var unsignedNumber = Math.abs(number);\n      var unsignedNumberString = String(unsignedNumber);\n      var numberLength = unsignedNumberString.length;\n      var numberLengths = [13, 10, 7, 4];\n      var bigNumPrefixes = ['T', 'B', 'M', 'k'];\n\n      // small numbers\n      if (unsignedNumber < 1000) {\n        return '' + signString + unsignedNumberString;\n      }\n\n      // really big numbers\n      if (numberLength > numberLengths[0] + 3) {\n        return number.toExponential(decimals).replace('e+', 'x10^');\n      }\n\n      // 999 < unsignedNumber < 999,999,999,999,999\n      var length = void 0;\n      for (var i = 0; i < numberLengths.length; i++) {\n        var _length = numberLengths[i];\n        if (numberLength >= _length) {\n          length = _length;\n          break;\n        }\n      }\n      var decimalIndex = numberLength - length + 1;\n      var unsignedNumberCharacterArray = unsignedNumberString.split('');\n      var wholePartArray = unsignedNumberCharacterArray.slice(0, decimalIndex);\n      var decimalPartArray = unsignedNumberCharacterArray.slice(decimalIndex, decimalIndex + decimals + 1);\n      var wholePart = wholePartArray.join('');\n\n      // pad decimalPart if necessary\n      var decimalPart = decimalPartArray.join('');\n      if (decimalPart.length < decimals) {\n        decimalPart += '' + Array(decimals - decimalPart.length + 1).join('0');\n      }\n      var output = void 0;\n      if (decimals === 0) {\n        output = '' + signString + wholePart + bigNumPrefixes[numberLengths.indexOf(length)];\n      } else {\n        var outputNumber = Number(wholePart + '.' + decimalPart).toFixed(decimals);\n        output = '' + signString + outputNumber + bigNumPrefixes[numberLengths.indexOf(length)];\n      }\n      return output;\n    },\n    // Converts an integer to a string containing commas every three digits.\n    intComma: function intComma(number) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      return Humanize.formatNumber(number, decimals);\n    },\n    intcomma: function intcomma() {\n      return Humanize.intComma.apply(Humanize, arguments);\n    },\n    // Formats the value like a 'human-readable' file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc).\n    fileSize: function fileSize(filesize) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];\n      for (var label in LABELS_FOR_POWERS_OF_KILO) {\n        if (LABELS_FOR_POWERS_OF_KILO.hasOwnProperty(label)) {\n          var minnum = LABELS_FOR_POWERS_OF_KILO[label];\n          if (filesize >= minnum) {\n            return Humanize.formatNumber(filesize / minnum, precision, '') + ' ' + label + 'B';\n          }\n        }\n      }\n      if (filesize >= 1024) {\n        return Humanize.formatNumber(filesize / 1024, 0) + ' KB';\n      }\n      return Humanize.formatNumber(filesize, 0) + Humanize.pluralize(filesize, ' byte');\n    },\n    filesize: function filesize() {\n      return Humanize.fileSize.apply(Humanize, arguments);\n    },\n    // Formats a number to a human-readable string.\n    // Localize by overriding the precision, thousand and decimal arguments.\n    formatNumber: function formatNumber(number) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var thousand = arguments.length <= 2 || arguments[2] === undefined ? ',' : arguments[2];\n      var decimal = arguments.length <= 3 || arguments[3] === undefined ? '.' : arguments[3];\n\n      // Create some private utility functions to make the computational\n      // code that follows much easier to read.\n      var firstComma = function firstComma(_number, _thousand, _position) {\n        return _position ? _number.substr(0, _position) + _thousand : '';\n      };\n      var commas = function commas(_number, _thousand, _position) {\n        return _number.substr(_position).replace(/(\\d{3})(?=\\d)/g, '$1' + _thousand);\n      };\n      var decimals = function decimals(_number, _decimal, usePrecision) {\n        return usePrecision ? _decimal + Humanize.toFixed(Math.abs(_number), usePrecision).split('.')[1] : '';\n      };\n      var usePrecision = Humanize.normalizePrecision(precision);\n\n      // Do some calc\n      var negative = number < 0 && '-' || '';\n      var base = String(parseInt(Humanize.toFixed(Math.abs(number || 0), usePrecision), 10));\n      var mod = base.length > 3 ? base.length % 3 : 0;\n\n      // Format the number\n      return negative + firstComma(base, thousand, mod) + commas(base, thousand, mod) + decimals(number, decimal, usePrecision);\n    },\n    // Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61')\n    toFixed: function toFixed(value, precision) {\n      precision = exists(precision) ? precision : Humanize.normalizePrecision(precision, 0);\n      var power = Math.pow(10, precision);\n\n      // Multiply up by precision, round accurately, then divide and use native toFixed()\n      return (Math.round(value * power) / power).toFixed(precision);\n    },\n    // Ensures precision value is a positive integer\n    normalizePrecision: function normalizePrecision(value, base) {\n      value = Math.round(Math.abs(value));\n      return isNaN(value) ? base : value;\n    },\n    // Converts an integer to its ordinal as a string.\n    ordinal: function ordinal(value) {\n      var number = parseInt(value, 10);\n      if (number === 0) {\n        return value;\n      }\n      var specialCase = number % 100;\n      if ([11, 12, 13].indexOf(specialCase) >= 0) {\n        return number + 'th';\n      }\n      var leastSignificant = number % 10;\n      var end = void 0;\n      switch (leastSignificant) {\n        case 1:\n          end = 'st';\n          break;\n        case 2:\n          end = 'nd';\n          break;\n        case 3:\n          end = 'rd';\n          break;\n        default:\n          end = 'th';\n      }\n      return '' + number + end;\n    },\n    // Interprets numbers as occurences. Also accepts an optional array/map of overrides.\n    times: function times(value) {\n      var overrides = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      if (isFiniteNumber(value) && value >= 0) {\n        var number = parseFloat(value);\n        var smallTimes = ['never', 'once', 'twice'];\n        if (exists(overrides[number])) {\n          return String(overrides[number]);\n        }\n        var numberString = exists(smallTimes[number]) && smallTimes[number].toString();\n        return numberString || number.toString() + ' times';\n      }\n      return null;\n    },\n    // Returns the plural version of a given word if the value is not 1. The default suffix is 's'.\n    pluralize: function pluralize(number, singular, plural) {\n      if (!(exists(number) && exists(singular))) {\n        return null;\n      }\n      plural = exists(plural) ? plural : singular + 's';\n      return parseInt(number, 10) === 1 ? singular : plural;\n    },\n    // Truncates a string if it is longer than the specified number of characters (inclusive).\n    // Truncated strings will end with a translatable ellipsis sequence (\"…\").\n    truncate: function truncate(str) {\n      var length = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '...' : arguments[2];\n      if (str.length > length) {\n        return str.substring(0, length - ending.length) + ending;\n      }\n      return str;\n    },\n    // Truncates a string after a certain number of words.\n    truncateWords: function truncateWords(string, length) {\n      var array = string.split(' ');\n      var result = '';\n      var i = 0;\n      while (i < length) {\n        if (exists(array[i])) {\n          result += array[i] + ' ';\n        }\n        i++;\n      }\n      if (array.length > length) {\n        return result + '...';\n      }\n      return null;\n    },\n    truncatewords: function truncatewords() {\n      return Humanize.truncateWords.apply(Humanize, arguments);\n    },\n    // Truncates a number to an upper bound.\n    boundedNumber: function boundedNumber(num) {\n      var bound = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '+' : arguments[2];\n      var result = void 0;\n      if (isFiniteNumber(num) && isFiniteNumber(bound)) {\n        if (num > bound) {\n          result = bound + ending;\n        }\n      }\n      return (result || num).toString();\n    },\n    truncatenumber: function truncatenumber() {\n      return Humanize.boundedNumber.apply(Humanize, arguments);\n    },\n    // Converts a list of items to a human readable string with an optional limit.\n    oxford: function oxford(items, limit, limitStr) {\n      var numItems = items.length;\n      var limitIndex = void 0;\n      if (numItems < 2) {\n        return String(items);\n      } else if (numItems === 2) {\n        return items.join(' and ');\n      } else if (exists(limit) && numItems > limit) {\n        var extra = numItems - limit;\n        limitIndex = limit;\n        limitStr = exists(limitStr) ? limitStr : ', and ' + extra + ' ' + Humanize.pluralize(extra, 'other');\n      } else {\n        limitIndex = -1;\n        limitStr = ', and ' + items[numItems - 1];\n      }\n      return items.slice(0, limitIndex).join(', ') + limitStr;\n    },\n    // Converts an object to a definition-like string\n    dictionary: function dictionary(object) {\n      var joiner = arguments.length <= 1 || arguments[1] === undefined ? ' is ' : arguments[1];\n      var separator = arguments.length <= 2 || arguments[2] === undefined ? ', ' : arguments[2];\n      var result = '';\n      if (exists(object) && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && !isArray(object)) {\n        var defs = [];\n        for (var key in object) {\n          if (object.hasOwnProperty(key)) {\n            var val = object[key];\n            defs.push('' + key + joiner + val);\n          }\n        }\n        return defs.join(separator);\n      }\n      return result;\n    },\n    // Describes how many times an item appears in a list\n    frequency: function frequency(list, verb) {\n      if (!isArray(list)) {\n        return null;\n      }\n      var len = list.length;\n      var times = Humanize.times(len);\n      if (len === 0) {\n        return times + ' ' + verb;\n      }\n      return verb + ' ' + times;\n    },\n    pace: function pace(value, intervalMs) {\n      var unit = arguments.length <= 2 || arguments[2] === undefined ? 'time' : arguments[2];\n      if (value === 0 || intervalMs === 0) {\n        // Needs a better string than this...\n        return 'No ' + Humanize.pluralize(0, unit);\n      }\n\n      // Expose these as overridables?\n      var prefix = 'Approximately';\n      var timeUnit = void 0;\n      var relativePace = void 0;\n      var rate = value / intervalMs;\n      for (var i = 0; i < TIME_FORMATS.length; ++i) {\n        // assumes sorted list\n        var f = TIME_FORMATS[i];\n        relativePace = rate * f.value;\n        if (relativePace > 1) {\n          timeUnit = f.name;\n          break;\n        }\n      }\n\n      // Use the last time unit if there is nothing smaller\n      if (!timeUnit) {\n        prefix = 'Less than';\n        relativePace = 1;\n        timeUnit = TIME_FORMATS[TIME_FORMATS.length - 1].name;\n      }\n      var roundedPace = Math.round(relativePace);\n      unit = Humanize.pluralize(roundedPace, unit);\n      return prefix + ' ' + roundedPace + ' ' + unit + ' per ' + timeUnit;\n    },\n    // Converts newlines to <br/> tags\n    nl2br: function nl2br(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '<br/>' : arguments[1];\n      return string.replace(/\\n/g, replacement);\n    },\n    // Converts <br/> tags to newlines\n    br2nl: function br2nl(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '\\r\\n' : arguments[1];\n      return string.replace(/\\<br\\s*\\/?\\>/g, replacement);\n    },\n    // Capitalizes first letter in a string\n    capitalize: function capitalize(string) {\n      var downCaseTail = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n      return '' + string.charAt(0).toUpperCase() + (downCaseTail ? string.slice(1).toLowerCase() : string.slice(1));\n    },\n    // Capitalizes the first letter of each word in a string\n    capitalizeAll: function capitalizeAll(string) {\n      return string.replace(/(?:^|\\s)\\S/g, function (a) {\n        return a.toUpperCase();\n      });\n    },\n    // Titlecase words in a string.\n    titleCase: function titleCase(string) {\n      var smallWords = /\\b(a|an|and|at|but|by|de|en|for|if|in|of|on|or|the|to|via|vs?\\.?)\\b/i;\n      var internalCaps = /\\S+[A-Z]+\\S*/;\n      var splitOnWhiteSpaceRegex = /\\s+/;\n      var splitOnHyphensRegex = /-/;\n      var _doTitleCase = void 0;\n      _doTitleCase = function doTitleCase(_string) {\n        var hyphenated = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n        var firstOrLast = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n        var titleCasedArray = [];\n        var stringArray = _string.split(hyphenated ? splitOnHyphensRegex : splitOnWhiteSpaceRegex);\n        for (var index = 0; index < stringArray.length; ++index) {\n          var word = stringArray[index];\n          if (word.indexOf('-') !== -1) {\n            titleCasedArray.push(_doTitleCase(word, true, index === 0 || index === stringArray.length - 1));\n            continue;\n          }\n          if (firstOrLast && (index === 0 || index === stringArray.length - 1)) {\n            titleCasedArray.push(internalCaps.test(word) ? word : Humanize.capitalize(word));\n            continue;\n          }\n          if (internalCaps.test(word)) {\n            titleCasedArray.push(word);\n          } else if (smallWords.test(word)) {\n            titleCasedArray.push(word.toLowerCase());\n          } else {\n            titleCasedArray.push(Humanize.capitalize(word));\n          }\n        }\n        return titleCasedArray.join(hyphenated ? '-' : ' ');\n      };\n      return _doTitleCase(string);\n    },\n    titlecase: function titlecase() {\n      return Humanize.titleCase.apply(Humanize, arguments);\n    }\n  };\n  return Humanize;\n});","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","root","factory","exports","module","define","amd","Humanize","TIME_FORMATS","name","value","LABELS_FOR_POWERS_OF_KILO","P","Math","pow","T","G","M","exists","maybe","isNaN","isFiniteNumber","isFinite","parseFloat","isArray","type","Object","prototype","toString","call","intword","number","charWidth","decimals","arguments","length","undefined","compactInteger","input","max","parseInt","signString","unsignedNumber","abs","unsignedNumberString","String","numberLength","numberLengths","bigNumPrefixes","toExponential","replace","i","_length","decimalIndex","unsignedNumberCharacterArray","split","wholePartArray","slice","decimalPartArray","wholePart","join","decimalPart","Array","output","indexOf","outputNumber","Number","toFixed","intComma","formatNumber","intcomma","apply","fileSize","filesize","precision","label","hasOwnProperty","minnum","pluralize","thousand","decimal","firstComma","_number","_thousand","_position","substr","commas","_decimal","usePrecision","normalizePrecision","negative","base","mod","power","round","ordinal","specialCase","leastSignificant","end","times","overrides","smallTimes","numberString","singular","plural","truncate","str","ending","substring","truncateWords","string","array","result","truncatewords","boundedNumber","num","bound","truncatenumber","oxford","items","limit","limitStr","numItems","limitIndex","extra","dictionary","object","joiner","separator","defs","key","val","push","frequency","list","verb","len","pace","intervalMs","unit","prefix","timeUnit","relativePace","rate","f","roundedPace","nl2br","replacement","br2nl","capitalize","downCaseTail","charAt","toUpperCase","toLowerCase","capitalizeAll","a","titleCase","smallWords","internalCaps","splitOnWhiteSpaceRegex","splitOnHyphensRegex","_doTitleCase","doTitleCase","_string","hyphenated","firstOrLast","titleCasedArray","stringArray","index","word","test","titlecase"],"sources":["D:/SPRING BOOT/reservation-salle/reservation-salle-front/node_modules/humanize-plus/dist/humanize.js"],"sourcesContent":["/* humanize.js - v1.8.2 */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/**\n * Copyright 2013-2016 HubSpotDev\n * MIT Licensed\n *\n * @module humanize.js\n */\n\n(function (root, factory) {\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return root.Humanize = factory();\n    });\n  } else {\n    root.Humanize = factory();\n  }\n})(this, function () {\n  //------------------------------------------------------------------------------\n  // Constants\n  //------------------------------------------------------------------------------\n\n  var TIME_FORMATS = [{\n    name: 'second',\n    value: 1e3\n  }, {\n    name: 'minute',\n    value: 6e4\n  }, {\n    name: 'hour',\n    value: 36e5\n  }, {\n    name: 'day',\n    value: 864e5\n  }, {\n    name: 'week',\n    value: 6048e5\n  }];\n\n  var LABELS_FOR_POWERS_OF_KILO = {\n    P: Math.pow(2, 50),\n    T: Math.pow(2, 40),\n    G: Math.pow(2, 30),\n    M: Math.pow(2, 20)\n  };\n\n  //------------------------------------------------------------------------------\n  // Helpers\n  //------------------------------------------------------------------------------\n\n  var exists = function exists(maybe) {\n    return typeof maybe !== 'undefined' && maybe !== null;\n  };\n\n  var isNaN = function isNaN(value) {\n    return value !== value;\n  }; // eslint-disable-line\n\n  var isFiniteNumber = function isFiniteNumber(value) {\n    return isFinite(value) && !isNaN(parseFloat(value));\n  };\n\n  var isArray = function isArray(value) {\n    var type = Object.prototype.toString.call(value);\n    return type === '[object Array]';\n  };\n\n  //------------------------------------------------------------------------------\n  // Humanize\n  //------------------------------------------------------------------------------\n\n  var Humanize = {\n\n    // Converts a large integer to a friendly text representation.\n\n    intword: function intword(number, charWidth) {\n      var decimals = arguments.length <= 2 || arguments[2] === undefined ? 2 : arguments[2];\n\n      /*\n      * This method is deprecated. Please use compactInteger instead.\n      * intword will be going away in the next major version.\n      */\n      return Humanize.compactInteger(number, decimals);\n    },\n\n\n    // Converts an integer into its most compact representation\n    compactInteger: function compactInteger(input) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      decimals = Math.max(decimals, 0);\n      var number = parseInt(input, 10);\n      var signString = number < 0 ? '-' : '';\n      var unsignedNumber = Math.abs(number);\n      var unsignedNumberString = String(unsignedNumber);\n      var numberLength = unsignedNumberString.length;\n      var numberLengths = [13, 10, 7, 4];\n      var bigNumPrefixes = ['T', 'B', 'M', 'k'];\n\n      // small numbers\n      if (unsignedNumber < 1000) {\n        return '' + signString + unsignedNumberString;\n      }\n\n      // really big numbers\n      if (numberLength > numberLengths[0] + 3) {\n        return number.toExponential(decimals).replace('e+', 'x10^');\n      }\n\n      // 999 < unsignedNumber < 999,999,999,999,999\n      var length = void 0;\n      for (var i = 0; i < numberLengths.length; i++) {\n        var _length = numberLengths[i];\n        if (numberLength >= _length) {\n          length = _length;\n          break;\n        }\n      }\n\n      var decimalIndex = numberLength - length + 1;\n      var unsignedNumberCharacterArray = unsignedNumberString.split('');\n\n      var wholePartArray = unsignedNumberCharacterArray.slice(0, decimalIndex);\n      var decimalPartArray = unsignedNumberCharacterArray.slice(decimalIndex, decimalIndex + decimals + 1);\n\n      var wholePart = wholePartArray.join('');\n\n      // pad decimalPart if necessary\n      var decimalPart = decimalPartArray.join('');\n      if (decimalPart.length < decimals) {\n        decimalPart += '' + Array(decimals - decimalPart.length + 1).join('0');\n      }\n\n      var output = void 0;\n      if (decimals === 0) {\n        output = '' + signString + wholePart + bigNumPrefixes[numberLengths.indexOf(length)];\n      } else {\n        var outputNumber = Number(wholePart + '.' + decimalPart).toFixed(decimals);\n        output = '' + signString + outputNumber + bigNumPrefixes[numberLengths.indexOf(length)];\n      }\n\n      return output;\n    },\n\n\n    // Converts an integer to a string containing commas every three digits.\n    intComma: function intComma(number) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      return Humanize.formatNumber(number, decimals);\n    },\n    intcomma: function intcomma() {\n      return Humanize.intComma.apply(Humanize, arguments);\n    },\n\n\n    // Formats the value like a 'human-readable' file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc).\n    fileSize: function fileSize(filesize) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];\n\n      for (var label in LABELS_FOR_POWERS_OF_KILO) {\n        if (LABELS_FOR_POWERS_OF_KILO.hasOwnProperty(label)) {\n          var minnum = LABELS_FOR_POWERS_OF_KILO[label];\n          if (filesize >= minnum) {\n            return Humanize.formatNumber(filesize / minnum, precision, '') + ' ' + label + 'B';\n          }\n        }\n      }\n      if (filesize >= 1024) {\n        return Humanize.formatNumber(filesize / 1024, 0) + ' KB';\n      }\n\n      return Humanize.formatNumber(filesize, 0) + Humanize.pluralize(filesize, ' byte');\n    },\n    filesize: function filesize() {\n      return Humanize.fileSize.apply(Humanize, arguments);\n    },\n\n\n    // Formats a number to a human-readable string.\n    // Localize by overriding the precision, thousand and decimal arguments.\n    formatNumber: function formatNumber(number) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var thousand = arguments.length <= 2 || arguments[2] === undefined ? ',' : arguments[2];\n      var decimal = arguments.length <= 3 || arguments[3] === undefined ? '.' : arguments[3];\n\n      // Create some private utility functions to make the computational\n      // code that follows much easier to read.\n      var firstComma = function firstComma(_number, _thousand, _position) {\n        return _position ? _number.substr(0, _position) + _thousand : '';\n      };\n\n      var commas = function commas(_number, _thousand, _position) {\n        return _number.substr(_position).replace(/(\\d{3})(?=\\d)/g, '$1' + _thousand);\n      };\n\n      var decimals = function decimals(_number, _decimal, usePrecision) {\n        return usePrecision ? _decimal + Humanize.toFixed(Math.abs(_number), usePrecision).split('.')[1] : '';\n      };\n\n      var usePrecision = Humanize.normalizePrecision(precision);\n\n      // Do some calc\n      var negative = number < 0 && '-' || '';\n      var base = String(parseInt(Humanize.toFixed(Math.abs(number || 0), usePrecision), 10));\n      var mod = base.length > 3 ? base.length % 3 : 0;\n\n      // Format the number\n      return negative + firstComma(base, thousand, mod) + commas(base, thousand, mod) + decimals(number, decimal, usePrecision);\n    },\n\n\n    // Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61')\n    toFixed: function toFixed(value, precision) {\n      precision = exists(precision) ? precision : Humanize.normalizePrecision(precision, 0);\n      var power = Math.pow(10, precision);\n\n      // Multiply up by precision, round accurately, then divide and use native toFixed()\n      return (Math.round(value * power) / power).toFixed(precision);\n    },\n\n\n    // Ensures precision value is a positive integer\n    normalizePrecision: function normalizePrecision(value, base) {\n      value = Math.round(Math.abs(value));\n      return isNaN(value) ? base : value;\n    },\n\n\n    // Converts an integer to its ordinal as a string.\n    ordinal: function ordinal(value) {\n      var number = parseInt(value, 10);\n\n      if (number === 0) {\n        return value;\n      }\n\n      var specialCase = number % 100;\n      if ([11, 12, 13].indexOf(specialCase) >= 0) {\n        return number + 'th';\n      }\n\n      var leastSignificant = number % 10;\n\n      var end = void 0;\n      switch (leastSignificant) {\n        case 1:\n          end = 'st';\n          break;\n        case 2:\n          end = 'nd';\n          break;\n        case 3:\n          end = 'rd';\n          break;\n        default:\n          end = 'th';\n      }\n\n      return '' + number + end;\n    },\n\n\n    // Interprets numbers as occurences. Also accepts an optional array/map of overrides.\n    times: function times(value) {\n      var overrides = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (isFiniteNumber(value) && value >= 0) {\n        var number = parseFloat(value);\n        var smallTimes = ['never', 'once', 'twice'];\n        if (exists(overrides[number])) {\n          return String(overrides[number]);\n        }\n\n        var numberString = exists(smallTimes[number]) && smallTimes[number].toString();\n        return numberString || number.toString() + ' times';\n      }\n      return null;\n    },\n\n\n    // Returns the plural version of a given word if the value is not 1. The default suffix is 's'.\n    pluralize: function pluralize(number, singular, plural) {\n      if (!(exists(number) && exists(singular))) {\n        return null;\n      }\n\n      plural = exists(plural) ? plural : singular + 's';\n\n      return parseInt(number, 10) === 1 ? singular : plural;\n    },\n\n\n    // Truncates a string if it is longer than the specified number of characters (inclusive).\n    // Truncated strings will end with a translatable ellipsis sequence (\"…\").\n    truncate: function truncate(str) {\n      var length = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '...' : arguments[2];\n\n      if (str.length > length) {\n        return str.substring(0, length - ending.length) + ending;\n      }\n      return str;\n    },\n\n\n    // Truncates a string after a certain number of words.\n    truncateWords: function truncateWords(string, length) {\n      var array = string.split(' ');\n      var result = '';\n      var i = 0;\n\n      while (i < length) {\n        if (exists(array[i])) {\n          result += array[i] + ' ';\n        }\n        i++;\n      }\n\n      if (array.length > length) {\n        return result + '...';\n      }\n\n      return null;\n    },\n    truncatewords: function truncatewords() {\n      return Humanize.truncateWords.apply(Humanize, arguments);\n    },\n\n\n    // Truncates a number to an upper bound.\n    boundedNumber: function boundedNumber(num) {\n      var bound = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '+' : arguments[2];\n\n      var result = void 0;\n\n      if (isFiniteNumber(num) && isFiniteNumber(bound)) {\n        if (num > bound) {\n          result = bound + ending;\n        }\n      }\n\n      return (result || num).toString();\n    },\n    truncatenumber: function truncatenumber() {\n      return Humanize.boundedNumber.apply(Humanize, arguments);\n    },\n\n\n    // Converts a list of items to a human readable string with an optional limit.\n    oxford: function oxford(items, limit, limitStr) {\n      var numItems = items.length;\n\n      var limitIndex = void 0;\n      if (numItems < 2) {\n        return String(items);\n      } else if (numItems === 2) {\n        return items.join(' and ');\n      } else if (exists(limit) && numItems > limit) {\n        var extra = numItems - limit;\n        limitIndex = limit;\n        limitStr = exists(limitStr) ? limitStr : ', and ' + extra + ' ' + Humanize.pluralize(extra, 'other');\n      } else {\n        limitIndex = -1;\n        limitStr = ', and ' + items[numItems - 1];\n      }\n\n      return items.slice(0, limitIndex).join(', ') + limitStr;\n    },\n\n\n    // Converts an object to a definition-like string\n    dictionary: function dictionary(object) {\n      var joiner = arguments.length <= 1 || arguments[1] === undefined ? ' is ' : arguments[1];\n      var separator = arguments.length <= 2 || arguments[2] === undefined ? ', ' : arguments[2];\n\n      var result = '';\n\n      if (exists(object) && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && !isArray(object)) {\n        var defs = [];\n        for (var key in object) {\n          if (object.hasOwnProperty(key)) {\n            var val = object[key];\n            defs.push('' + key + joiner + val);\n          }\n        }\n\n        return defs.join(separator);\n      }\n\n      return result;\n    },\n\n\n    // Describes how many times an item appears in a list\n    frequency: function frequency(list, verb) {\n      if (!isArray(list)) {\n        return null;\n      }\n\n      var len = list.length;\n      var times = Humanize.times(len);\n\n      if (len === 0) {\n        return times + ' ' + verb;\n      }\n\n      return verb + ' ' + times;\n    },\n    pace: function pace(value, intervalMs) {\n      var unit = arguments.length <= 2 || arguments[2] === undefined ? 'time' : arguments[2];\n\n      if (value === 0 || intervalMs === 0) {\n        // Needs a better string than this...\n        return 'No ' + Humanize.pluralize(0, unit);\n      }\n\n      // Expose these as overridables?\n      var prefix = 'Approximately';\n      var timeUnit = void 0;\n      var relativePace = void 0;\n\n      var rate = value / intervalMs;\n      for (var i = 0; i < TIME_FORMATS.length; ++i) {\n        // assumes sorted list\n        var f = TIME_FORMATS[i];\n        relativePace = rate * f.value;\n        if (relativePace > 1) {\n          timeUnit = f.name;\n          break;\n        }\n      }\n\n      // Use the last time unit if there is nothing smaller\n      if (!timeUnit) {\n        prefix = 'Less than';\n        relativePace = 1;\n        timeUnit = TIME_FORMATS[TIME_FORMATS.length - 1].name;\n      }\n\n      var roundedPace = Math.round(relativePace);\n      unit = Humanize.pluralize(roundedPace, unit);\n\n      return prefix + ' ' + roundedPace + ' ' + unit + ' per ' + timeUnit;\n    },\n\n\n    // Converts newlines to <br/> tags\n    nl2br: function nl2br(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '<br/>' : arguments[1];\n\n      return string.replace(/\\n/g, replacement);\n    },\n\n\n    // Converts <br/> tags to newlines\n    br2nl: function br2nl(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '\\r\\n' : arguments[1];\n\n      return string.replace(/\\<br\\s*\\/?\\>/g, replacement);\n    },\n\n\n    // Capitalizes first letter in a string\n    capitalize: function capitalize(string) {\n      var downCaseTail = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      return '' + string.charAt(0).toUpperCase() + (downCaseTail ? string.slice(1).toLowerCase() : string.slice(1));\n    },\n\n\n    // Capitalizes the first letter of each word in a string\n    capitalizeAll: function capitalizeAll(string) {\n      return string.replace(/(?:^|\\s)\\S/g, function (a) {\n        return a.toUpperCase();\n      });\n    },\n\n\n    // Titlecase words in a string.\n    titleCase: function titleCase(string) {\n      var smallWords = /\\b(a|an|and|at|but|by|de|en|for|if|in|of|on|or|the|to|via|vs?\\.?)\\b/i;\n      var internalCaps = /\\S+[A-Z]+\\S*/;\n      var splitOnWhiteSpaceRegex = /\\s+/;\n      var splitOnHyphensRegex = /-/;\n\n      var _doTitleCase = void 0;\n      _doTitleCase = function doTitleCase(_string) {\n        var hyphenated = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n        var firstOrLast = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n\n        var titleCasedArray = [];\n        var stringArray = _string.split(hyphenated ? splitOnHyphensRegex : splitOnWhiteSpaceRegex);\n\n        for (var index = 0; index < stringArray.length; ++index) {\n          var word = stringArray[index];\n          if (word.indexOf('-') !== -1) {\n            titleCasedArray.push(_doTitleCase(word, true, index === 0 || index === stringArray.length - 1));\n            continue;\n          }\n\n          if (firstOrLast && (index === 0 || index === stringArray.length - 1)) {\n            titleCasedArray.push(internalCaps.test(word) ? word : Humanize.capitalize(word));\n            continue;\n          }\n\n          if (internalCaps.test(word)) {\n            titleCasedArray.push(word);\n          } else if (smallWords.test(word)) {\n            titleCasedArray.push(word.toLowerCase());\n          } else {\n            titleCasedArray.push(Humanize.capitalize(word));\n          }\n        }\n\n        return titleCasedArray.join(hyphenated ? '-' : ' ');\n      };\n\n      return _doTitleCase(string);\n    },\n    titlecase: function titlecase() {\n      return Humanize.titleCase.apply(Humanize, arguments);\n    }\n  };\n\n  return Humanize;\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}